---
title: Figure 2 - Heatmap of unprodoctive splicing by tissues
date: '2024-09-21'
code-fold: true
execute:
  include: false
  eval: false
  echo: false
  warning: false
  message: false
categories:
  - figures
  - manuscript
---

Heatmap of PSI of unproductive splicing for introns that are commonly differentially spliced across tissues.

::: {.callout-note}
## Notes

* Use GTEx dataset

:::




```{r}
#| eval: false
#| echo: false
httpgd::hgd(host = "10.50.250.200", port = 9696, token = FALSE)
```

```{r}
#| eval: false
#| echo: false
httpgd::hgd_close()
```




```{r}
#| label: setup
#| eval: true

suppressMessages(library(tidyverse))
suppressMessages(library(glue))
suppressMessages(library(data.table))
suppressMessages(library(ComplexHeatmap))
suppressMessages(library(gprofiler2))

suppressMessages(library(cowplot))
theme_set(theme_cowplot(font_size = 14, font_family = "Helvetica"))


```


```{r}
#| label: funcs
#| eval: true
EnrichTest = function(
  query_genes,
  background_genes = NULL,
  sources = c("GO:BP", "GO:MF", "GO:CC")) {

  gost1 = gost(
    query = query_genes,
    organism = "hsapiens",
    ordered_query = FALSE,
    multi_query = FALSE,
    significant = TRUE,
    exclude_iea = FALSE,
    measure_underrepresentation = FALSE,
    evcodes = FALSE,
    sources = sources,
    custom_bg = background_genes,
    user_threshold = 0.05,
    highlight = TRUE
  )
  return(gost1)
}
```

# Heatmap

```{r}
#| label: load-plotdata
#| eval: true
#| cache: true
plotdata = readRDS("../code/plotdata/gtex-psi-heatmap/heatmap_data.rds")

plotmx = cbind(plotdata[['shared_UP_psi']][[1]][, c(1)], # first column (cluster ids) 
               map_dfc(plotdata[['shared_UP_psi']], ~.x[, c(2)]) # (second columns are UP PSI per tissue)
              )

```




```{r}
#| eval: true
#| cache: true
non_brain_tissues = names(plotdata[['shared_UP_psi']])  %>% 
  .[!str_detect(., "Brain")]
heatmap_tissues = c(non_brain_tissues, "Brain-Cerebellum", "Brain-Anteriorcingulatecortex_BA24_", "Brain-Putamen_basalganglia_", "Brain-Spinalcord_cervicalc-1_")
plotmx = plotmx[, c("cluster", heatmap_tissues), with = FALSE]

```


```{r}
#| eval: true
#| cache: true

# remove clusters with NA values
NA_Clusters = plotmx[
  , .(cluster, 
      hasNA = rowSums(map(.SD, ~is.na(.x)) %>% as.data.frame)
  ), .SDcols = 2:ncol(plotmx)
  ][hasNA > 0, cluster]

plotmx = plotmx[!cluster %in% NA_Clusters]
```

```{r}
#| eval: true
#| cache: true

tissue_code = fread("../analysis/gtex-tissue-code.csv", header = F, col.names = c("tissue", "tissue_code"))

legendBreaks <- seq(-4, 4, 2)
# colors <- rev(RColorBrewer::brewer.pal(length(legendBreaks), "RdBu"))
colors <- c("#053061", "#2166AC", "#F7F7F7", "#B2182B", "#67001F")
colfunc <- circlize::colorRamp2(
  breaks = legendBreaks, 
  colors = colors
  )

cluster_method = "ward.D2"

col_labs = left_join(
  x = data.frame(tissue = colnames(plotmx)[-1]),
  y = tissue_code,
  by = "tissue"
) %>%
  pull(tissue_code)
```


```{r}
#| eval: true
#| cache: true
set.seed(123)
ht <- plotmx %>%
  column_to_rownames("cluster") %>%
  as.matrix %>% t %>% scale %>% t %>%
  Heatmap(
    column_title = glue("Unproductive splicing across GTEx tissues, N = {nrow(plotmx)}"),
    col = colfunc,
    row_km = 12, row_gap = unit(0.2, "mm"), 
    column_km = 3, 
    column_gap = unit(0, "mm"),
    show_parent_dend_line = FALSE,
    show_row_names = FALSE, clustering_method_rows = cluster_method, show_row_dend = F,
    clustering_method_columns = cluster_method, column_dend_height = unit(1.5, "in"), show_column_dend = TRUE,
    heatmap_legend_param = list(title = "PSI (z-score)"),
    use_raster = TRUE, raster_quality = 2,
    column_labels = col_labs
    )
```


```{r}
# save ht to a svg file
svg("plot-fig2-heatmap.svg", width = 6, height = 6)
draw(ht)
dev.off()
```



```{r}
#| label: fig-heatmap
#| eval: true
#| include: true
#| column: page
#| out-width: 100%
#| fig-cap: "Heatmap of unproductive splicing by tissues"

knitr::include_graphics("plot-fig2-heatmap.svg")
```




# GO enrichment

GO enrichment on the 12 clusters shown in the heatmap above. 
The 12 clusters of intron-clusters represent 1197 genes. I used `gprofiler2` to run GO enrichment
on each of these 12 sets of genes against GO terms in `GO:BP`, `GO:MF`, and `GO:CC`.

Using the 1197 genes as background didn't yield any significant enrichment. But there is enrichment
when using all human genes as background. as. shown in @tbl-go-enrichment-with-all-human-genes-as-background .
P-values are multiple testing corrected using gprofiler2's internal method.


```{r}
#| label: extract-intronclusters-per-row-cluster
#| eval: true
#| cache: true
ht = draw(ht)
ht_clusters= row_order(ht) %>% 
  map(~plotmx$cluster[.x]) %>% 
  map(~data.table(cluster = .x))

# load one lf2 result to get gene names
ds = readRDS("../code/plotdata/ds_v_dge/Liver_v_Lung_data.rds")$ds

# get gene_names
ht_clusters = map(
  ht_clusters,
  ~left_join(.x, ds[, .(cluster, gene_name, gene_id)] %>% unique, by = "cluster")
) %>% 
  map(~.x[!is.na(gene_name)])

query_genes = map(ht_clusters, pluck, "gene_id") %>% 
  map(~str_extract(.x, "ENSG\\d+") %>% unique)
background_genes = reduce(query_genes, union)

```


```{r}
#| label: tbl-number-of-genes-per-group
#| tbl-cap: "Number of genes per group"
#| eval: true
#| include: true

query_genes %>% map_int(length) %>% enframe("group", "N_genes")
```



## Enrichment test using heatmap genes as background

```{r}
#| label: run-go-enrichment-with-heatmap-genes-as-background
#| eval: true
#| include: true
#| cache: true

gost1 = map(query_genes, EnrichTest, background_genes = background_genes, .progress = TRUE)

if (all(map_lgl(gost1, is.null))) {
  print("No enrichment found in any groups using ~1000 heatmap genes as background.")
} else {
  print("These clusters have enrichment in GO terms")
  gost1[!map_lgl(gost1, is.null)] %>% names
}
```

## Enrichment test using whole genome as background

```{r}
#| label: tbl-go-enrichment-with-all-human-genes-as-background
#| tbl-cap: "GO enrichment results"
#| column: page
#| eval: true
#| include: true
#| cache: true

gost2 = map(query_genes, EnrichTest, background_genes = NULL, .progress = TRUE)

print("These clusters have enrichment in GO terms")
gost2[!map_lgl(gost2, is.null)] %>% names


gost2[!map_lgl(gost2, is.null)] %>%
  imap_dfr(~.x$result %>% as.data.table %>% mutate(query = paste0("group_", .y))) %>% 
  select(query, p_value, source, term_name, p_value,
         query_size, term_size, intersection_size,
         effective_domain_size, highlighted) %>% 
  arrange(query, p_value) %>% 
  DT::datatable()
```


```{r}
#| label: fig-go-enrichment
#| fig-cap: "GO enrichment results"
#| fig-height: 10
#| out-width: 100%
#| eval: true
#| include: true
#| cache: true
#| column: page

gost2 = gost2[!map_lgl(gost2, is.null)]
gost2 = imap(gost2, \(x, y) {x$result$query = glue("group_{y}"); x})

plots = map(gost2, ~gostplot(.x, interactive = F))

gridExtra::grid.arrange(grobs = plots, ncol = 3)
```

