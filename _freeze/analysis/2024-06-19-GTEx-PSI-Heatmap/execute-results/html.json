{
  "hash": "5d4c2a79022080f517be0c0d145c7341",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"GTEx PSI heatmap\"\ndate: \"2024-6-19\"\nparams: \n  fdr_ds: 1e-5\n  fdr_dge: 0.8\n  psi: 0.2\ncategories:\n  - GTEx\n  - DGE\n  - heatmap\ncode-fold: true\nexecute:\n  include: true\n  cache: true\n---\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGetTopUpIntrons <- function(data, FDR_ds, FDR_dge, dPSI) {\n  dge <- pluck(data, \"dge\")\n  ds <- pluck(data, \"ds\")\n\n  # if a cluster has multiple UP introns, only select the best 1\n  ds <- ds[itype == 'UP' & ctype == 'PR,UP'\n    ][, rk := rank(-abs(deltapsi), ties.method = \"first\"), by = cluster\n    ][rk ==1\n    ][, rk := NULL][]\n  ds <- ds[`p.adjust` < FDR_ds & abs(deltapsi) > dPSI,]\n\n  dge <- dge[padj < FDR_dge,]\n  \n  ds_excl_cols <- c('itype', 'ctype', 'df', 'p', 'p.adjust','logef', 'loglr', 'status')\n  dge_excl_cols <- c('baseMean', 'lfcSE', 'stat', 'pvalue', 'padj')\n  chosen <- inner_join(\n      x = ds[, -ds_excl_cols, with = FALSE],\n      y = dge[, -dge_excl_cols, with = FALSE],\n      by = \"gene_id\",\n      suffix = c(\"_ds\", \"_dge\")\n    ) %>%\n    .[deltapsi * log2FoldChange < 0, ]\n\n  return(chosen)\n}\n\n\nGetHeatmapMatrix <- function(dt, clusters, contrast) {\n  # dt$intron2 <- str_replace_all(dt$intron, \":clu_\\\\d+_\", \"\")\n  tissues <- str_split(contrast, \"_v_\") %>% unlist()\n  keep1 <- c(\"intron\", \"cluster\", tissues[1], \"itype\", \"ctype\")\n  keep2 <- c(\"intron\", \"cluster\", tissues[2], \"itype\", \"ctype\")\n  out <- list(\n    dt[cluster %in% clusters, keep1, with = FALSE],\n    dt[cluster %in% clusters, keep2, with = FALSE]\n  )\n  names(out) <- tissues\n\n  return(out)\n}\n\n\nsumPSI <- function(dt, cn) {\n  dt <- rename(dt, psi = {{ cn }}) %>% as.data.table\n  dt <- dt[itype == \"UP\"][, .(psi = sum(psi)), by = cluster] # sum unprod PSI by cluster\n  names(dt) <- c(\"cluster\", cn)\n  return(as.data.table(dt))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nFDR = c(ds = params$fdr_ds, dge = params$fdr_dge)\ndPSI = params$psi\n\nprint(glue(\"ds FDR: {FDR['ds']} \", \"dge FDR: {FDR['dge']} \", \"dPSI: {dPSI}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nds FDR: 1e-5 dge FDR: 0.1 dPSI: 0.2\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(glue(\"Dir: {getwd()}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDir: /project/yangili1/cdai/splice-pub/analysis\n```\n\n\n:::\n:::\n\n\n\n# Intro\n\n\nPlot heat map of unproductive splicing across tissues in GTEx. Each value represent a total sum of PSI for unproductive splicing. Each column is a tissue.\n\nClusters are selected like so:\n\nFor each pair of comparison between tissue A and tissue B, do the following:\n\n1. Select the most significant DS introns with *FDR < 1e\\-5* and *|deltaPSI| > 0.2*. If there are more than 1 intron passing this criteria within a cluster, select the best one (larger delta PSI)\n2. Select significant DGE genes with *FDR < 0.8*\n3. join ds and dge data using gene IDs. Each gene may have multiple introns.\n4. Only select introns where direction of change in PSI and gene expression are opposite.\n5. select cluster IDs\n\nThe final set of clusters is the union of all clusters selected in each comparison.\n\n\n\n\n\n> *Note cluster ids must be the same across all contrasts. I had confirmed this is true by randomly select 500 tissue pairs where cluster ids are the same. Also, when I run leafcutter2 diffferential splicing analysis, I first generated intron cluster across all GTEx tissues (49), then run leafcutter against this set of intron cluster.*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reado it\ncontrast_ls <- dir('../../SpliFi/data/ds_v_dge', '*.rds') %>% str_remove_all('_data\\\\.rds')\ncontrast_ls <- contrast_ls[str_detect(contrast_ls, \"\\\\w+_v_\\\\w+\")]\ntissues <- str_split(contrast_ls, \"_v_\") %>% unlist %>% unique\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_f <- glue(\"../../SpliFi/data/ds_v_dge/{contrast_ls}_data.rds\")\nnames(data_f) <- contrast_ls\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclus <- future_map(\n  data_f[1:10], \n  \\(rds_f) {\n    data <- readRDS(rds_f)\n    unfiltered_clu <- pluck(data, \"ds\", \"cluster\")\n    dt <- GetTopUpIntrons(data, FDR_ds = FDR['ds'], FDR_dge = FDR['dge'], dPSI = dPSI)\n    filtered_clu <- dt$cluster\n    return(list(unfiltered_clu = unfiltered_clu, filtered_clu = filtered_clu))\n  }\n)\n\n\nfiltered_clus <- reduce(map(clus, pluck, \"filtered_clu\"), union)\ncommon_clus <- reduce(map(clus, pluck, \"unfiltered_clu\"), intersect)\nplot_clus <- intersect(common_clus, filtered_clus)\n\nprint(glue(\"Plotting {length(plot_clus)} clusters.\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPlotting 52 clusters.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplotdata <- imap(\n  data_f[1:3],\n  \\(rds_f, contrast) {\n    data <- readRDS(rds_f)\n    dt <- GetHeatmapMatrix(pluck(data, \"ds\"), plot_clus, contrast)\n  }\n) %>% list_flatten(name_spec = \"{outer}.{inner}\")\n\n\n# get the names of stored plot datatable without duplicating dataste\nplotdata.names <- names(plotdata) %>%\n  str_split(\"\\\\.\", simplify = T) %>%\n  as.data.table() %>%\n  .[, .(V1, rk = rank(V1)), by = V2] %>% # after split, V1=contrast, V2=tissue\n  .[rk == 1] %>% # since a tissue can be used in multiple contrasts, only keep 1\n  .[, .(V1, nm = paste(V1, \".\", V2, sep = \"\"))] %>%\n  .[, nm]\n\n# reduce dataset to only the selected tissues\nplotdata <- plotdata[plotdata.names]\n\nnames(plotdata) <- str_split(names(plotdata), \"\\\\.\") %>% map_chr(~.[2])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap(plotdata, ~.x[, cluster]) %>% reduce(intersect) %>% length\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 52\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplotdata <- imap(plotdata, ~sumPSI(.x, .y))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nâ„¹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(.y)\n\n  # Now:\n  data %>% select(all_of(.y))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmx_clusters <- intersect(reduce(map(plotdata, ~.x[, cluster]), intersect), plot_clus)\nlength(mx_clusters)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 51\n```\n\n\n:::\n\n```{.r .cell-code}\nplotdata <- map(plotdata, ~.x[cluster %in% mx_clusters])\n\n# combine all data into a single matrix\nmx <- cbind(plotdata[[1]][, 1], map_dfc(plotdata, ~.x[, 2]))\n```\n:::\n\n\n\n\n\n## Plot Heatmap\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntissue_labels <- fread(\"../analysis/gtex-tissue-code.csv\",\n  col.names = c(\"tissue\", \"label\"),\n  header = F) %>% deframe\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# organize the matrix, mainly labels\nmx <- mx %>% column_to_rownames(\"cluster\")\ncolnames(mx) <- tissue_labels[colnames(mx)]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlegendBreaks <- seq(-4, 4, 2)\n# colors <- rev(RColorBrewer::brewer.pal(length(legendBreaks), \"RdBu\"))\ncolors <- c(\"#053061\", \"#2166AC\", \"#F7F7F7\", \"#B2182B\", \"#67001F\")\ncolfunc <- circlize::colorRamp2(\n  breaks = legendBreaks, \n  colors = colors\n  )\n```\n:::\n\n::: {.cell .column-screen}\n\n```{.r .cell-code}\nset.seed(123)\ncluster_method <- \"ward.D\"\nht <- mx %>%\n  as.matrix %>% t %>% scale %>% t %>%\n  Heatmap(\n    col = colfunc,\n    row_km = 12, row_gap = unit(0.2, \"mm\"), \n    column_km = 3, column_gap = unit(0.2, \"mm\"),\n    show_parent_dend_line = F,\n    show_row_names = FALSE, clustering_method_rows = cluster_method, show_row_dend = F,\n    clustering_method_columns = cluster_method, \n    column_dend_height = unit(1.5, \"in\"), show_column_dend = T,\n    heatmap_legend_param = list(title = \"PSI (z-score)\"),\n    use_raster = T\n    )\n```\n:::\n\n::: {.cell messages='false'}\n\n```{.r .cell-code}\nht\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required namespace: Cairo\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required namespace: magick\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2024-06-19-GTEx-PSI-Heatmap_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n## Select a union set of unprod. intron clusters\n\ncriteria:\n\n  1. ds FDR < 1e-5\n  2. abs(deltaPSI) > 0.1 \n  3. dge FDR < 1e-5\n  4. select the best UP intron for each cluster, then collect cluster ID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}